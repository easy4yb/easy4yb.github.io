<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFC总结</title>
    <url>/2021/03/01/BFC%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>BFC的理解与应用</p>
<a id="more"></a>

<h3 id="BFC简介"><a href="#BFC简介" class="headerlink" title="BFC简介"></a>BFC简介</h3><p><strong>BFC</strong>（Block format context， 块级格式化上下文)，它是页面中一块独立的渲染区域，内部元素的渲染不会影响边界外部的元素。</p>
<h3 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h3><p>只要元素满足下列任一条件即可触发BFC：</p>
<ul>
<li><code>body</code>根元素</li>
<li><code>float</code>是<code>none</code>以外的值</li>
<li><code>position</code>是<code>absolute</code>或<code>fixed</code></li>
<li><code>overflow</code>是<code>visible</code>以外的值<code>(hidden, auto, scroll)</code></li>
<li><code>display</code>是<code>inline-block</code>, <code>flex</code>或<code>table-cells</code></li>
</ul>
<h3 id="BFC应用"><a href="#BFC应用" class="headerlink" title="BFC应用"></a>BFC应用</h3><p>1.通过把相邻元素放在不同BFC中，可以清除外边距折叠</p>
<p>2.清楚浮动</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS浮动</title>
    <url>/2021/03/05/CSS%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<p>浮动布局可以使元素脱离正常流，块级元素会忽略浮动元素，而行内元素会环绕浮动元素。</p>
<a id="more"></a>

<h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&#x27;border&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&#x27;float_lightcoral&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&#x27;normal_red&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&#x27;float_blue&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        我的名字叫吉良吉影，33岁。住在杜王町东北部的别墅区一带，未婚。我在龟友连锁店服务。每天都要加班到晚上8点才能回家。我不抽烟，酒仅止于浅尝。晚上11点睡，每天要睡足8个小时。睡前，我一定喝一杯温牛奶，然后做20分钟的放松体操，上了床，马上熟睡。一觉到天亮，决不把疲劳和压力，留到第二天。医生都说我很正常.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> black solid;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.float_lightcoral</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.float_blue</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.normal_red</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果：</strong></p>
<p><img src="/2021/03/05/CSS%E6%B5%AE%E5%8A%A8/float.png" alt="float布局"></p>
<p>由图可见，红色块级元素忽略了浮动元素，排在左上角，但是一部分被粉色浮动元素遮挡。而行内元素，即文字部分，受到蓝色浮动元素的影响，环绕其展开。</p>
<h4 id="float可设置的值"><a href="#float可设置的值" class="headerlink" title="float可设置的值"></a><strong>float</strong>可设置的值</h4><blockquote>
<p><code>left</code>：元素向左浮动</p>
<p><code>right</code>：元素向右浮动</p>
<p><code>none</code>：默认值，不浮动</p>
<p><code>inherit</code>：从父元素继承浮动值</p>
</blockquote>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>因为浮动元素不能撑开包含块，有时需要清楚浮动以使元素正常显示。其方法主要有两种：</p>
<h5 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h5><p><a href="https://ez4yb.cn/2021/03/03/BFC%E6%80%BB%E7%BB%93/#more">如前所述</a></p>
<h5 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h5><p>其原理是给元素尾部设置一个内容为空的伪类，并清除浮动，以撑开包含块。下面是个简单的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如图：</p>
<p><img src="/2021/03/05/CSS%E6%B5%AE%E5%8A%A8/%E6%B8%85%E9%99%A4%E5%89%8D.png" alt="清除前"></p>
<p>由图可见，为了使布局正常显示，footer应该被撑开，排列在最下面。</p>
<p>遂给<code>container</code>添加<code>clearfix</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>效果：</p>
<p><img src="/2021/03/05/CSS%E6%B5%AE%E5%8A%A8/%E6%B8%85%E9%99%A4%E5%90%8E.png" alt="清除后"></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的Flex布局</title>
    <url>/2021/04/19/CSS%E7%9A%84Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的position定位</title>
    <url>/2021/03/03/CSS%E7%9A%84position%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p>CSS的定位方式由position元素的设置决定</p>
<a id="more"></a>

<p><strong>position</strong>属性可以设定的值有：</p>
<ul>
<li>static</li>
<li>relative</li>
<li>absolute</li>
<li>fixed</li>
<li>sticky</li>
</ul>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p><code>static</code>是position属性的默认值，浏览器会按照源码的顺序，决定每个元素的位置，这称为“正常流”(Normal flow)。</p>
<h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>表示元素相对于默认位置(即static)偏移，可以由<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>控制偏移量</p>
<h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>表示元素相对于父元素偏移，且该父元素不能是<code>static</code>定位，否则定位基点就会变成整个网页的根元素<code>html</code>。和relative类似，absolute定位也需用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>控制偏移量</p>
<blockquote>
<p>absolute定位的元素会被“正常流”忽略，即在正常流中，该元素所占空间为零</p>
</blockquote>
<h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>表示元素相对于浏览器窗口绝对定位</p>
<h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>sticky定位可以使元素呈现“动态固定”的效果，当父元素开始脱离视窗时，只要与sticky元素的距离达到生效门槛，元素定位从relative自动切换为fixed；等父元素完全脱离视窗时，元素定位从fixed自动切换为relative</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒模型总结</title>
    <url>/2021/02/27/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>对盒子模型做个简单概括</p>
<a id="more"></a>

<h3 id="盒模型类别"><a href="#盒模型类别" class="headerlink" title="盒模型类别"></a>盒模型类别</h3><ol>
<li><strong>标准盒模型</strong><br><img src="/2021/02/27/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/%E6%A0%87%E5%87%86%E7%9B%92%E6%A8%A1%E5%9E%8B.png" alt="标准盒模型"><br> 由四个部分组成：</li>
</ol>
<ul>
<li><strong>content box</strong>: 用来显示内容的区域，通过”width”和”height”设置大小</li>
<li><strong>padding box</strong>: 内边距</li>
<li><strong>border box</strong>: 边框</li>
<li><strong>margin box</strong>: 外边距</li>
</ul>
<ol start="2">
<li><strong>替代(IE)盒模型</strong><br><img src="/2021/02/27/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/%E6%9B%BF%E4%BB%A3%E7%9B%92%E6%A8%A1%E5%9E%8B.png" alt="替代盒模型"></li>
</ol>
<p>如图可以很直观的看出，替代盒模型相比IE盒模型的区别在于它的width和height等于content + padding + border的宽度。</p>
<p>可以通过设置<code>box-sizing</code>来设置盒子的类型（默认为标准盒模型）:</p>
<blockquote>
<p><code>box-sizing: content-box</code>：标准盒模型</p>
<p><code>box-sizing: border-box</code>： IE盒模型</p>
</blockquote>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>可以整体设置大小，也可以分别各个方向分别设置，如：</p>
<blockquote>
<p>padding-top: 30px; </p>
<p>padding-right: 20px; </p>
<p>padding-bottom: 40px;</p>
<p>padding-left: 100px;</p>
</blockquote>
<blockquote>
<p>padding:30px 20px 40px 100px;</p>
</blockquote>
<ul>
<li><p>如果写了四个值，则顺序为：上    右    下    左；</p>
</li>
<li><p>如果写了三个值，则顺序为：上    右    下。自动设置左 = 右。</p>
</li>
<li><p>如果只写了两个值，如<code>padding: 30px 40px</code>，则等价于<code>padding: 30px 40px 30px 40px</code>;</p>
</li>
</ul>
<p><strong>margin属性设置和padding类似</strong></p>
<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p>border的属性设置顺序为：粗细    类型    颜色：如</p>
<blockquote>
<p>border: 1px ridge red</p>
</blockquote>
<p><strong>通过border画三角形</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">title</span>&gt;<span class="selector-tag">Document</span>&lt;/<span class="selector-tag">title</span>&gt;</span><br><span class="line">    &lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">            <span class="attribute">border-color</span>: red white white;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/<span class="selector-tag">style</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/2021/02/27/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/%E4%B8%89%E8%A7%92%E5%BD%A2.png" alt="三角形"></p>
<h3 id="margin纵向重叠"><a href="#margin纵向重叠" class="headerlink" title="margin纵向重叠"></a>margin纵向重叠</h3><ul>
<li>相邻元素的<code>margin-top</code>和<code>margin-bottom</code>会发生重叠</li>
<li>空白内容也会重叠</li>
</ul>
<p>如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">title</span>&gt;<span class="selector-tag">Document</span>&lt;/<span class="selector-tag">title</span>&gt;</span><br><span class="line">    &lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/<span class="selector-tag">style</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">P</span>&gt;<span class="selector-tag">AAA</span>&lt;/<span class="selector-tag">P</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">P</span>&gt;&lt;/<span class="selector-tag">P</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">P</span>&gt;&lt;/<span class="selector-tag">P</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">P</span>&gt;<span class="selector-tag">CCC</span>&lt;/<span class="selector-tag">P</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/2021/02/27/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/%E9%87%8D%E5%8F%A0.png" alt="重叠"></p>
<h3 id="margin负值"><a href="#margin负值" class="headerlink" title="margin负值"></a>margin负值</h3><ul>
<li><code>margin-top</code>和<code>margin-left</code>负值，元素向上，向左移动</li>
<li><code>margin-right</code>负值，右侧元素左移，自身不受影响</li>
<li><code>margin-bottom</code>负值，下方元素上移，自身不受影响</li>
</ul>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git语法总结</title>
    <url>/2021/01/30/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>​        以一张思维导图的形式对Git常用指令做个概括</p>
<a id="more"></a>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><img src="/2021/01/30/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93.png" alt="Git常用指令总结"></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><code>git add. </code>提交被修改和新建的文件,但不包括被删除的文件</li>
<li><code>git add -u</code>更新所有被修改的文件。</li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型与继承总结</title>
    <url>/2021/03/17/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p>&emsp;&emsp;每个JavaScript对象在创建的时候，就会有与之关联的另一个对象，这个对象就叫做原型，每个对象都会从“原型”继承属性。</p>
<a id="more"></a>

<h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>&emsp;&emsp;初看文字描述的时候我觉得原型链很怪异，不好理解，在结合了代码和图示后，一切都豁然开朗。那么就先来一段可以反应原型特性的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//人类有一个属性名字</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//人类有一个方法叫吃</span></span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> eat something`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生是人类，继承人类的属性“名字”以及方法“吃”</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//学生有两个属性，姓名和学号</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, number</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//学生有一个方法叫自我介绍</span></span><br><span class="line">    <span class="function"><span class="title">selfIntro</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`姓名<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 学号<span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师是人类，继承人类的属性“名字”以及方法“吃”</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="comment">//老师有两个属性，名字和科目</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, major</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//老师有一个方法叫讲授</span></span><br><span class="line">    <span class="function"><span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>教<span class="subst">$&#123;<span class="built_in">this</span>.major&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student的实例</span></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Student(<span class="string">&#x27;袁斌&#x27;</span>,<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.name);<span class="comment">//袁斌</span></span><br><span class="line"><span class="built_in">console</span>.log(me.number);<span class="comment">//3</span></span><br><span class="line">me.selfIntro();<span class="comment">//姓名袁斌 学号3</span></span><br><span class="line">me.eat();<span class="comment">//袁斌 eat something</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//teacher的实例</span></span><br><span class="line"><span class="keyword">const</span> missMa = <span class="keyword">new</span> Teacher(<span class="string">&#x27;马老师&#x27;</span>, <span class="string">&#x27;DSP&#x27;</span>)              </span><br><span class="line"><span class="built_in">console</span>.log(missMa.name);<span class="comment">//马老师</span></span><br><span class="line"><span class="built_in">console</span>.log(missMa.major);<span class="comment">//DSP</span></span><br><span class="line">missMa.teach();<span class="comment">//马老师教DSP</span></span><br><span class="line">missMa.eat();<span class="comment">//马老师 eat something</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如上可见，<code>me</code>是<code>Student</code>的实例对象，同时获得了<code>Student</code>的方法以及<code>Student</code>的父类<code>People</code>的方法，那么这些方法是如何获取的呢。在以上代码的基础上，我们在浏览器输入<code>me</code>查看：</p>
<p><img src="/2021/03/17/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/me.png" alt="me"></p>
<p>&emsp;&emsp;可以看出，<code>me</code>是一个<code>Student</code>对象，它有属性<code>name</code>、<code>number</code>，以及一个<code>__proto__</code>属性，该<code>___proto__</code>属性中有一个<code>selfIntro</code>方法，一个<code>__proto__</code>属性，**以及一个<code>constructor</code>属性指向<code>Class Student</code>**，即<code>Student</code>构造函数。我们把这个<code>__proto__</code>属性写作<code>me.__proto__</code>。再输入<code>Student.prototype</code>查看：</p>
<p><img src="/2021/03/17/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/Student.png"></p>
<p>&emsp;&emsp;可以很清晰的看到，它和上面的<code>me.__proto__</code>内容相同。同时，它的<code>__proto__</code>有一个<code>constructor</code>属性指向<code> Class People</code>，结合上面的黑字部分，我们可以判断出，<code>Student.prototype</code>是<code>people</code>的一个实例。我们可以进一步验证以上推断：</p>
<p><img src="/2021/03/17/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/%E8%AF%81%E6%98%8E.png" alt="证明"></p>
<p>&emsp;&emsp;由此我们可以根据这些关系画出一个一目了然的图示（为了简化省略了<code>Teacher</code>）：</p>
<p><img src="/2021/03/17/JavaScript%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/list.png" alt="原型链"></p>
<p>&emsp;&emsp;这便是JavaScript的<strong>原型链</strong>，当我们调用一个对象的方法时，依次查找本对象的属性，如果没有，就沿着<code>__proto__</code>属性向上查找，直到找到同名方法。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h5 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h5><p>&emsp;&emsp;最简洁的继承方式莫过于前文使用过的，通过<code>Class</code>和<code>extends</code>实现继承，子类<code>extends</code>父类，用<code>super</code>调用父类构造函数即可实现继承。需要注意的是：</p>
<ol>
<li><p>函数声明可以提升，而类定义不能；</p>
</li>
<li><p>函数受函数作用域限制，而类受块作用域限制</p>
</li>
<li><p>创建一个对象实例时，调用类构造函数必须使用<code>new</code>操作符，而普通构造函数如果不使用<code>new</code>调用，那么就会以全局的<code>this</code>作为内部对象。调回类构造函数时如果忘了使用new则会抛出错误。</p>
<p><code>Class</code>是ES6新增的语法，而在这之前，JavaScript主要通过原型和构造函数实现继承，事实上，类继承背后使用的仍然是原型和构造函数的概念。</p>
</li>
</ol>
<h5 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型链继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;袁斌&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> SubType();</span><br><span class="line"></span><br><span class="line">sub1.getName();<span class="comment">//袁斌</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;它存在两个问题：</p>
<ol>
<li><p>原型中包含的引用会在所有实例间共享，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sub1.arr);<span class="comment">//[1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> SubType();</span><br><span class="line">sub2.name = <span class="string">&#x27;某某&#x27;</span>;</span><br><span class="line">sub2.arr.push(<span class="number">3</span>);	</span><br><span class="line">sub1.getName();<span class="comment">//袁斌</span></span><br><span class="line">sub2.getName();<span class="comment">//某某</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.arr);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.__proto__.name);<span class="comment">//袁斌</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>name</code>属性看似没有共享是因为<code>sub2.name = &#39;某某&#39;</code>是为<code>sub2</code>添加了<code>name</code>值，并不是修改了原型链上的<code>name</code>。代码最后一行可见原型上的<code>name</code>值并没有改变。</p>
</li>
<li><p>子类型在实例化时不能给父类型的构造函数传参。</p>
</li>
</ol>
<p>因此，原型链继承基本不会被单独使用。</p>
<h5 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数"></a>盗用构造函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//盗用构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> SubType();</span><br><span class="line"></span><br><span class="line">sub2.arr.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub1.arr);<span class="comment">//[1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.arr);<span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>本质是在新的<code>SubType</code>对象中运行了<code>SuperType()</code>中的所有初始化方法，因而每个实例都会有自己的<code>arr</code>属性。</p>
<p>同时也允许在子类构造函数中向父类构造函数传参：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> SubType(<span class="string">&#x27;袁斌&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub1.name);<span class="comment">//袁斌</span></span><br><span class="line"><span class="built_in">console</span>.log(sub1.age);<span class="comment">//21</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;但是它也存在一个问题：函数不能重用，每次创建实习都会创建一遍方法。</p>
<p>因此，盗用构造函数基本也不能单独使用。</p>
<h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承属性</span></span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> SubType(<span class="string">&#x27;袁斌&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> SubType(<span class="string">&#x27;某某&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sub1.arr.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub1.arr);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.arr);<span class="comment">//[1, 2]</span></span><br><span class="line">sub1.getName();<span class="comment">//袁斌</span></span><br><span class="line">sub2.getName();<span class="comment">//某某</span></span><br><span class="line">sub1.getAge();<span class="comment">//21</span></span><br><span class="line">sub2.getAge();<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可以看出，组合继承使用原型链继承原型上的属性和方法，而通过盗用构造函数来继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p>
<h5 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name: <span class="string">&#x27;袁斌&#x27;</span>,</span><br><span class="line">    arr: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = object(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.__proto__);<span class="comment">//&#123; name: &#x27;袁斌&#x27;, arr: [ 1, 2 ] &#125;</span></span><br><span class="line"></span><br><span class="line">b.arr.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.arr);<span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;等同于ES5中的<code>Object.create()</code>方法，本质上是对传入的对象执行了一次浅复制，与原型链继承存在同样的问题。它适合“不需要单独创建构造函数，但仍然需要在对象间共享信息”的场合。</p>
<h5 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寄生式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = object(o);<span class="comment">//即上面的原型式继承方法，也可用Object.create()代替</span></span><br><span class="line">    clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;盗用构造函数类似，它也会导致函数难以重用。</p>
<h5 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//寄生组合式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.create(superType.prototype);<span class="comment">//创建对象</span></span><br><span class="line">    prototype.constructor = subType;<span class="comment">//增强对象</span></span><br><span class="line">    subType.prototype = prototype;<span class="comment">//赋值对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> SubType(<span class="string">&#x27;袁斌&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> SubType(<span class="string">&#x27;某某&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sub1.arr.push(<span class="number">3</span>);	</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub1.arr);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.arr);<span class="comment">//[1, 2]</span></span><br><span class="line">sub1.getName();<span class="comment">//袁斌</span></span><br><span class="line">sub2.getName();<span class="comment">//某某</span></span><br><span class="line">sub1.getAge();<span class="comment">//21</span></span><br><span class="line">sub2.getAge();<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可见寄生组合式继承仅仅是把组合式继承中的<code>SubType.prototype = new SuperType()</code>改为以下过程：先创建一个父类原型的副本，然后给返回的<code>prototype</code>设置<code>construtor</code>属性，解决组合式继承由于重写原型导致<code>constructor</code>丢失的问题，然后将新创建的对象赋给子类型的原型。这样相比组合式继承，少调用了一个父类构造函数，避免了<code>SubType.prototype</code>中不必要的属性。而且，原型链仍保持不变，还能正常使用<code>instanceOf</code>和<code>isPrototypeOf()</code>。综上所述，“寄生组合式继承是引用类型继承的最佳模式“。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现哈希表</title>
    <url>/2021/02/19/JavaScript%E5%AE%9E%E7%8E%B0%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<p>使用JavaScript通过链地址法实现哈希表</p>
<a id="more"></a>

<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>&emsp;&emsp;哈希表是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。<br>&emsp;&emsp;给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。</p>
<h4 id="哈希表实现"><a href="#哈希表实现" class="headerlink" title="哈希表实现"></a>哈希表实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">this</span>.storage = [];</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.limit = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//哈希函数</span></span><br><span class="line">    HashTable.prototype.hasFunc = <span class="function"><span class="keyword">function</span>(<span class="params">str, size</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> hashcode = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            hashcode = <span class="number">37</span> * hashcode + str.charCodeAt(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> index = hashcode % size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为质数</span></span><br><span class="line">    HashTable.prototype.isPrime = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(num); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入与修改</span></span><br><span class="line">    HashTable.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//根据key获取index</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hasFunc(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据index获取bucket</span></span><br><span class="line">        <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断bucket是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(!bucket)&#123;</span><br><span class="line">            bucket = [];</span><br><span class="line">            <span class="built_in">this</span>.storage[index] = bucket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否是修改数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> tuple = bucket[i];</span><br><span class="line">            <span class="keyword">if</span>(tuple[<span class="number">0</span>] == key)&#123;</span><br><span class="line">                tuple[<span class="number">1</span>] = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行添加操作</span></span><br><span class="line">        bucket.push([key, value]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否需要扩容</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.count &gt; <span class="number">0.75</span> * <span class="built_in">this</span>.limit)&#123;</span><br><span class="line">            <span class="keyword">let</span> newLimit = <span class="built_in">this</span>.limit * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">this</span>.isPrime(newLimit))&#123;</span><br><span class="line">                newLimit++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.resize(newLimit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    HashTable.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//根据key获取index</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hasFunc(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据index获取bucket</span></span><br><span class="line">        <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断bucket是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(!bucket)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找key</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> tuple = bucket[i];</span><br><span class="line">            <span class="keyword">if</span>(tuple[<span class="number">0</span>] == key)&#123;</span><br><span class="line">                <span class="keyword">return</span> tuple[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    HashTable.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//根据key获取index</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hasFunc(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据index获取bucket</span></span><br><span class="line">        <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断bucket是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(!bucket)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找key并删除</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> tuple = bucket[i];</span><br><span class="line">            <span class="keyword">if</span>(tuple[<span class="number">0</span>] == key)&#123;</span><br><span class="line">                bucket.splice(i, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">this</span>.count--;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否需要缩小容量</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.count &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count &lt; <span class="number">0.25</span> * <span class="built_in">this</span>.limit)&#123;</span><br><span class="line">                    <span class="keyword">let</span> newLimit = <span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit/<span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">while</span>(!<span class="built_in">this</span>.isPrime(newLimit))&#123;</span><br><span class="line">                        newLimit++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">this</span>.resize(newLimit);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    HashTable.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素个数</span></span><br><span class="line">    HashTable.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩容</span></span><br><span class="line">    HashTable.prototype.resize = <span class="function"><span class="keyword">function</span> (<span class="params">newLimit</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//保留旧的数组内容</span></span><br><span class="line">        <span class="keyword">let</span> oldStorage = <span class="built_in">this</span>.storage;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置所有属性</span></span><br><span class="line">        <span class="built_in">this</span>.storage = [];</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.limit = newLimit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历旧数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldStorage.length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> bucket = oldStorage[i];</span><br><span class="line">            <span class="keyword">if</span>(bucket == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; bucket.length; j++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> tuple = bucket[i];</span><br><span class="line">                    <span class="built_in">this</span>.put(tuple[<span class="number">0</span>], tuple[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现栈</title>
    <url>/2021/02/09/JavaScript%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    <content><![CDATA[<p>使用JavaScriot实现栈结构（数组方式）</p>
<a id="more"></a>

<h3 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h3><p>栈是一种“运算受限”的线性表，其特点为：</p>
<ul>
<li>LIFO（last in first out），即后入栈的元素，将会先弹出栈空间，类似把很多碟子垒在一起，后放上去的必须先拿出来</li>
</ul>
<p><strong>如图所示：</strong></p>
<p><img src="/2021/02/09/JavaScript%E5%AE%9E%E7%8E%B0%E6%A0%88/Stack.jpg" alt="栈结构图示"></p>
<ol>
<li>向一个栈插入新元素又称作进栈，入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素</li>
<li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li>
</ol>
<h3 id="栈结构常见操作"><a href="#栈结构常见操作" class="headerlink" title="栈结构常见操作"></a>栈结构常见操作</h3><ul>
<li><p><code>push(element)</code>:  添加一个新元素到栈顶位置.</p>
</li>
<li><p><code>pop()</code>：移除栈顶的元素，同时返回被移除的元素。</p>
</li>
<li><p><code>peek()</code>：返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它）。</p>
</li>
<li><p><code>isEmpty()</code>：如果栈里没有任何元素就返回<code>true</code>，否则返回<code>false</code>。</p>
</li>
<li><p><code>clear()</code>：移除栈里的所有元素。</p>
</li>
<li><p><code>size()</code>：返回栈里的元素个数。这个方法和数组的<code>length</code>属性很类似。</p>
</li>
</ul>
<h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//栈中的属性</span></span><br><span class="line">    <span class="built_in">this</span>.items = []; </span><br><span class="line">    <span class="comment">//栈中的方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加一个新元素到栈顶位置</span></span><br><span class="line">    Stack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//借用数组的push()方法</span></span><br><span class="line">        <span class="built_in">this</span>.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//移除栈顶的元素，同时返回被移除的元素</span></span><br><span class="line">    Stack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//借用数组的pop()方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回栈顶的元素，不对栈做任何修改</span></span><br><span class="line">    Stack.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果栈里没有任何元素就返回true，否则返回false</span></span><br><span class="line">    Stack.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//移除栈里的所有元素</span></span><br><span class="line">    Stack.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items = [];</span><br><span class="line">        <span class="comment">//也可以通过多次调用pop()</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//返回栈里的元素个数</span></span><br><span class="line">    Stack.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重写toString方法</span></span><br><span class="line">    Stack.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++)&#123;</span><br><span class="line">            s += <span class="built_in">this</span>.items[i] + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><h5 id="十进制转化为二进制"><a href="#十进制转化为二进制" class="headerlink" title="十进制转化为二进制"></a>十进制转化为二进制</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十进制转化为二进制（decimal to binary)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">let</span> decNum = decNumber;</span><br><span class="line">    <span class="keyword">while</span>(decNum)&#123;</span><br><span class="line">        <span class="comment">//把decNum除以2的余数压入栈</span></span><br><span class="line">        stack.push(decNum % <span class="number">2</span>);</span><br><span class="line">       	<span class="comment">//更新decNum为其除以2向下取整的结果</span></span><br><span class="line">        decNum = <span class="built_in">Math</span>.floor(decNum/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> binString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        binString += stack.pop();</span><br><span class="line">    &#125;	        </span><br><span class="line">    <span class="keyword">return</span> binString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现二叉搜索树</title>
    <url>/2021/02/22/JavaScript%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<p>使用JavaScript实现二叉搜索树(施工中)</p>
<a id="more"></a>

<h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>一个非空的二叉搜索树（BST，Binary Search Tree）满足以下性质：</p>
<ul>
<li>非空左子树的所有键值均小于其根节点的键值</li>
<li>非空右子树的所有键值均大于其根节点的键值</li>
<li>左，右子树本身也是二叉搜索树</li>
</ul>
<p>因此，树中相对较小的值总保存在左节点上，相对较大的值总保存在右节点上。这样一来，在二叉搜索树中查找一个值，其实是模仿了二分查找法，可以很大程度地提升效率。</p>
<h4 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h4><ul>
<li><code>insert(key)</code>：向树中插入一个新的键。</li>
<li><code>search(key)</code>：在书中查找一个键，存在返回true，不存在则返回false。</li>
<li><code>inOrderTraversal()</code>： 中序遍历所有节点</li>
<li><code>preOrderTraversal()</code>： 先序遍历所有节点</li>
<li><code>postOrderTraversal()</code>： 后序遍历所有节点</li>
<li><code>min()</code>： 返回树中最小的键值</li>
<li><code>max()</code>： 返回树中最大的键值</li>
<li><code>remove(key)</code>： 从树中移除某个键</li>
</ul>
<h4 id="二叉搜索树的实现"><a href="#二叉搜索树的实现" class="headerlink" title="二叉搜索树的实现"></a>二叉搜索树的实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现链表</title>
    <url>/2021/02/15/JavaScript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>使用JavaScript实现链表以及双向链表</p>
<a id="more"></a>

<h4 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h4><p>​    链表是一组节点组成的集合，每个节点都使用一个对象的引用来指向后一个节点。如图：</p>
<p><img src="/2021/02/15/JavaScript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/LinkedList.jpg" alt="链表图示"></p>
<h4 id="链表对比数组"><a href="#链表对比数组" class="headerlink" title="链表对比数组"></a>链表对比数组</h4><ul>
<li>优点</li>
</ul>
<ol>
<li>链表内存空间不是必须是连续的，可以充分利用计算机内存空间。</li>
<li>链表不必再创建时就设定大小，并且大小可以无限的延申下去。</li>
<li>链表在插入和删除数据时，时间复杂度可以达到O(1)，效率相对数组高很多</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>链表访问任何一个位置的元素时，都学要从头开始访问，无法通过下标直接访问元素</li>
</ol>
<h4 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装链表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//封装Node类作为节点</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//向链表尾部添加一个新的项</span></span><br><span class="line">    LinkedList.prototype.apend = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;            </span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向链表的特定位置插入一个新的项</span></span><br><span class="line">    LinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">positon, data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//越界判断</span></span><br><span class="line">        <span class="keyword">if</span>(positon &lt; <span class="number">0</span> || positon &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">            <span class="comment">//判断链表是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.head)&#123;</span><br><span class="line">                <span class="built_in">this</span>.head = newNode;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">                <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(positon == <span class="number">0</span>)&#123;</span><br><span class="line">                    newNode.next = current;</span><br><span class="line">                    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span>(i++ &lt; positon)&#123;</span><br><span class="line">                        previous = current;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    newNode.next = current;</span><br><span class="line">                    previous.next = newNode;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应位置的元素</span></span><br><span class="line">    LinkedList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; position; i++)&#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回元素在列表中的索引，如果链表中没有该元素则返回-1</span></span><br><span class="line">    LinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.data == data)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改某个位置的元素</span></span><br><span class="line">    LinkedList.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">position, data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.get(position);</span><br><span class="line">        current.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表的特定位置移除一项</span></span><br><span class="line">    LinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(position == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head = current.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i++ &lt; position)&#123;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = current.next;</span><br><span class="line">            current.next = previous.next;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中移除一项</span></span><br><span class="line">    LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">        <span class="built_in">this</span>.length--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果链表中不包含任何元素，返回true，否则返回false</span></span><br><span class="line">    LinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回链表包含的元素个数</span></span><br><span class="line">    LinkedList.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于链表项使用了Node类，就需要重写继承自Javascript对象默认的toString方法，让其只输出元素的值</span></span><br><span class="line">    LinkedList.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> listString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            listString += <span class="string">&#x27; &#x27;</span> + current.data;</span><br><span class="line">            current = current.next</span><br><span class="line">            <span class="built_in">this</span>.length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ul>
<li><p>单向链表</p>
<ul>
<li>只能从头遍历到尾或者从尾遍历到头</li>
<li>可以轻松地到达下一个节点，但是回到前一个节点是很难地</li>
</ul>
</li>
<li><p>双向链表</p>
<ul>
<li>既可以从头遍历到尾，也可从尾遍历到头</li>
<li>一个节点既有向前遍历的节点，也有向后遍历的节点</li>
<li>每次加入或删除节点时，需要处理四个节点的引用，实现起来更加复杂</li>
<li>相比于单向链表，占用内存空间更大</li>
</ul>
</li>
</ul>
<p><strong>图示</strong>：</p>
<p><img src="/2021/02/15/JavaScript%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/DoublyLinkedList.jpg" alt="双向链表"></p>
<h4 id="双向链表实现"><a href="#双向链表实现" class="headerlink" title="双向链表实现"></a>双向链表实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//构建Node类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element;</span><br><span class="line">        <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//向链表尾部添加一个新的项</span></span><br><span class="line">    DoublyLinkedList.prototype.apend = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head = newNode;</span><br><span class="line">            <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">            newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">            <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向链表的特定位置添加一个新的项</span></span><br><span class="line">    DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="comment">//越界判断</span></span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//链表为空的情况</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.head = newNode;</span><br><span class="line">                <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position &lt; <span class="built_in">this</span>.length/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//插入位置为0的情况</span></span><br><span class="line">                <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">                    newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">                    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//插入位置为链表前半段的情况</span></span><br><span class="line">                    <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; position; i++)&#123;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    current.prev.next = newNode;</span><br><span class="line">                    newNode.prev = current.prev;</span><br><span class="line">                    current.prev = newNode;</span><br><span class="line">                    newNode.next = current;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length)&#123;</span><br><span class="line">                <span class="comment">//插入位置为尾部的情况</span></span><br><span class="line">                newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">                <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">                <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//插入位置为后半段的情况</span></span><br><span class="line">                <span class="keyword">let</span> current = <span class="built_in">this</span>.tail;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="built_in">this</span>.length; i &gt; position; i--)&#123;</span><br><span class="line">                    current = current.prev;</span><br><span class="line">                &#125;</span><br><span class="line">                current.next.prev = newNode;</span><br><span class="line">                newNode.next = current.next;</span><br><span class="line">                current.next = newNode;</span><br><span class="line">                newNode.prev = current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应位置的元素</span></span><br><span class="line">    DoublyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//越界判断</span></span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; position; i++)&#123;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> current.element;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回元素在链表中的索引，如果没有则返回-1</span></span><br><span class="line">    DoublyLinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(current)</span><br><span class="line">        &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span>(current.element == element)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改某个位置的元素</span></span><br><span class="line">    DoublyLinkedList.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">position, newElement</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//越界判断</span></span><br><span class="line">        <span class="keyword">if</span>(position &lt;= <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; position; i++)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.element = newElement;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中的特定位置移除一项</span></span><br><span class="line">    DoublyLinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//越界判断</span></span><br><span class="line">        <span class="keyword">if</span>(position &lt;= <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">            <span class="keyword">if</span>(position == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">                <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position == <span class="built_in">this</span>.length)&#123;</span><br><span class="line">                <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">                <span class="built_in">this</span>.tail.next = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; position; i++)&#123;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                current.prev.next = current.next;</span><br><span class="line">                current.next.prev = current.prev;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    DoublyLinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回链表包含的元素个数</span></span><br><span class="line">    DoublyLinkedList.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString方法</span></span><br><span class="line">    DoublyLinkedList.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            newString += current.element + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回正向遍历的节点字符串形式</span></span><br><span class="line">    DoublyLinkedList.prototype.forwardString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回反向遍历的节点字符串形式</span></span><br><span class="line">    DoublyLinkedList.prototype.reserveString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.tail;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            newString += current.element + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            current = current.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现队列</title>
    <url>/2021/02/13/JavaScript%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>基于JavaScript的数组实现队列以及优先级队列</p>
<a id="more"></a>

<h4 id="队列结构"><a href="#队列结构" class="headerlink" title="队列结构"></a>队列结构</h4><p>​    就像栈是以LIFO形式限制访问的数据结构一样，队列以先进先出(FIFO)形式限制访问。队列在列表末尾添加数据，但从列表开头获取数据。</p>
<p><strong>图示</strong></p>
<p><img src="/2021/02/13/JavaScript%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/Queue.jpg" alt="队列"></p>
<h4 id="队列常用操作"><a href="#队列常用操作" class="headerlink" title="队列常用操作"></a>队列常用操作</h4><ul>
<li><code>enqueue(element)</code>将元素加入队列</li>
<li><code>dequeue()</code>把队列的前端元素删除,并返回被移除的元素</li>
<li><code>front()</code>查看队列的前端元素</li>
<li><code>isEmpty()</code>查看队列是否为空</li>
<li><code>size()</code>查看队列元素的个数</li>
<li><code>toString()</code>返回队列字符串</li>
</ul>
<h4 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//将元素加入队列</span></span><br><span class="line">    Queue.prototype.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    	<span class="built_in">this</span>.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把队列的前端元素删除，并返回被移除的元素</span></span><br><span class="line">    Queue.prototype.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> dequeue.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看队列的前端元素</span></span><br><span class="line">    Queue.prototype.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看队列是否为空</span></span><br><span class="line">    Queue.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看队列的个数</span></span><br><span class="line">    Queue.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回队列的字符串</span></span><br><span class="line">    Queue.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length, i++)&#123;</span><br><span class="line">			s += <span class="built_in">this</span>.items[i] + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="队列应用"><a href="#队列应用" class="headerlink" title="队列应用"></a>队列应用</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">击鼓传花问题：几个朋友一起玩一个游戏, 围成一圈, 开始数数, 数到某个数字的人自动淘汰，最后剩下的这个人会获得胜利, 请问最后剩下的是原来在哪一个位置上的人?</span><br></pre></td></tr></table></figure>
<p><strong>实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList, num</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//创建一个队列</span></span><br><span class="line">	<span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">	<span class="comment">//把名单放入队列</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;nameList.length; i++)&#123;</span><br><span class="line">		queue.enqueue(nameList[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//循环淘汰</span></span><br><span class="line">	<span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			queue.enqueue(queue.dequeue());</span><br><span class="line">		&#125;</span><br><span class="line">		queue.dequeue();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nameList.indexOf(queue.dequeue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><p>顾名思义，优先级队列即元素的排列顺序与优先级有关的队列，实现优先级队列主要又两方面需要考虑：</p>
<ul>
<li>封装元素和优先级放在一起（可以封装一个新的构造函数）</li>
<li>添加元素时，将当前元素的优先级和队列中已经存在元素的优先级进行比较，以获得自己正确的位置。</li>
</ul>
<h4 id="优先级队列实现"><a href="#优先级队列实现" class="headerlink" title="优先级队列实现"></a>优先级队列实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//优先级队列</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">element, priority</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element;</span><br><span class="line">        <span class="built_in">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line"></span><br><span class="line">   PriorityQueue.prototype.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看队列的前端元素</span></span><br><span class="line">   PriorityQueue.prototype.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看队列是否为空</span></span><br><span class="line">   PriorityQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看队列元素的个数</span></span><br><span class="line">   PriorityQueue.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队列字符串</span></span><br><span class="line">    PriorityQueue.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++)&#123;</span><br><span class="line">            s += <span class="built_in">this</span>.items[i].element + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.items[i].priority + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    PriorityQueue.prototype.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.items.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.items.push(queueElement)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(queueElement.priority &lt;= <span class="built_in">this</span>.items[i].priority)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.items.splice(i ,<span class="number">0</span> , queueElement);</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历完元素，优先级都大于新插入元素，则把其放在最后</span></span><br><span class="line">            <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">                <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现集合</title>
    <url>/2021/02/17/JavaScript%E5%AE%9E%E7%8E%B0%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>虽然es6已经包括了Set类，可以直接使用，但为了了解集合的内部实现机制，我尝试自己来封装一下这个Set类。</p>
<a id="more"></a>
<h4 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h4><ol>
<li>集合通常是由一组无序的不能重复的元素构成</li>
<li>可以看作一种特殊的数组，特殊在于里面的元素没有顺序也不能重复</li>
</ol>
<h4 id="集合常用操作"><a href="#集合常用操作" class="headerlink" title="集合常用操作"></a>集合常用操作</h4><ul>
<li>add(value): 向集合中添加一个新的项</li>
<li>remove(value): 从集合中移除一个值</li>
<li>has(value): 判断集合中是否存在该值</li>
<li>clear(): 移除集合中的所有项</li>
<li>size(): 返回集合所包含元素的数量</li>
<li>values(): 返回一个包含集合中所有值的数组</li>
</ul>
<h4 id="集合的实现"><a href="#集合的实现" class="headerlink" title="集合的实现"></a>集合的实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法:</span></span><br><span class="line">    <span class="comment">//向集合添加一个新的项</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断集合中是否已存在该元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.has(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items[value] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从集合中移除一个值</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.has(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.items[value];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果值在集合中，返回true，否则返回false</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//移除集合中的所有项</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回集合中所包含元素的数量</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个包含集合中所有值的数组</span></span><br><span class="line">    <span class="built_in">Set</span>.prototype.values = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="集合间的操作"><a href="#集合间的操作" class="headerlink" title="集合间的操作"></a>集合间的操作</h4><ul>
<li>求两集合并集</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.union(otherSet)&#123;</span><br><span class="line">    <span class="comment">//创建一个新的Set实例储存并集结果</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取出原集合的值</span></span><br><span class="line">    <span class="keyword">let</span> Values = <span class="built_in">this</span>.values();</span><br><span class="line">    <span class="comment">//把取出的值插入unionSet</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">        unionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取出另一集合的值</span></span><br><span class="line">    values = otherset.values();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">        unionSet.add(values[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>求两集合交集</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> values = <span class="built_in">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">        <span class="comment">//如果该值也存在于另一个集合，则存入</span></span><br><span class="line">        <span class="keyword">if</span>(otherSet.has(values[i]))&#123;</span><br><span class="line">            intersectionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>求两集合差集</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> differeneSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">let</span> values = <span class="built_in">this</span>.values();</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">           <span class="comment">//如果该值不存在于另一个集合，则存入</span></span><br><span class="line">           <span class="keyword">if</span>(otherSet.has(values[i]))&#123;</span><br><span class="line">               differenceSet.add(values[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> difference;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>子集判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherset</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> values = <span class="built_in">this</span>.values();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!otherset.has(values[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深拷贝</title>
    <url>/2021/03/15/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>JavaScript存在值类型和引用类型的区分，当我们想根据一个已存在的引用类型复制出一个新的引用类型时，我们就需要通过深拷贝来实现。</p>
<a id="more"></a>

<h3 id="类型区分"><a href="#类型区分" class="headerlink" title="类型区分"></a>类型区分</h3><p>对一个值类型进行复制后，复制值与之前的值没有关系，二者可以单独修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//4</span></span><br></pre></td></tr></table></figure>


<p>对一个引用类型进行复制，实际上是使新对象的指针指向原对象指针所指向的位置。所以对新对象的属性进行修改时，会通过指针去修改新旧对象共同指向的内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    name: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        province: <span class="string">&#x27;Hubei&#x27;</span>,</span><br><span class="line">        city: <span class="string">&#x27;Wuhan&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = a;</span><br><span class="line"></span><br><span class="line">b.age = <span class="number">21</span>;</span><br><span class="line">b.address.city = <span class="string">&#x27;Jiangxi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.age);				<span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(a.address.city);	<span class="comment">//Jiangxi</span></span><br></pre></td></tr></table></figure>
<p>由此可见，通过这种方式复制一个引用类型，并没有创建一个新对象，当我们并不想修改原先的引用类型值的时候，就需要进行“深拷贝”，如图所示：</p>
<p><img src="/2021/03/15/JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深拷贝"></p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="方法一-：递归遍历"><a href="#方法一-：递归遍历" class="headerlink" title="方法一 ：递归遍历"></a>方法一 ：递归遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">//初始化返回结果</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        result = [];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="comment">//保证key不是原型的值</span></span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key))&#123;</span><br><span class="line">            <span class="comment">//递归调用</span></span><br><span class="line">            result[key] =  deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    name: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        province: <span class="string">&#x27;Hubei&#x27;</span>,</span><br><span class="line">        city: <span class="string">&#x27;Wuhan&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = deepClone(a);</span><br><span class="line"></span><br><span class="line">b.age = <span class="number">21</span>;</span><br><span class="line">b.name = <span class="string">&#x27;yyy&#x27;</span>;</span><br><span class="line">b.address.city = <span class="string">&#x27;Xiangyang&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);	<span class="comment">//&#123; age: 20, name: &#x27;xxx&#x27;, address: &#123; province: &#x27;Hubei&#x27;, city: &#x27;Wuhan&#x27; &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b);	<span class="comment">//&#123; age: 21, name: &#x27;yyy&#x27;, address: &#123; province: &#x27;Hubei&#x27;, city: &#x27;Xiangyang&#x27; &#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可见执行深拷贝后成功达到了目的。</p>
<h4 id="方法二：JSON-parse-JSON-stringify-obj"><a href="#方法二：JSON-parse-JSON-stringify-obj" class="headerlink" title="方法二：JSON.parse(JSON.stringify(obj))"></a>方法二：JSON.parse(JSON.stringify(obj))</h4><p>利用<code>JSON.stringify</code> 将对象序列化（JSON字符串），再使用<code>JSON.parse</code>来反序列化(还原)对象。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>apply、call和bind</title>
    <url>/2021/04/15/apply%E3%80%81call%E5%92%8Cbind/</url>
    <content><![CDATA[<p>&emsp;&emsp;apply、call和bind的主要作用都是改变<strong>this</strong>的指向，而具体的使用则有所不同。</p>
<a id="more"></a>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call()</code>可以改变函数执行时的上下文，将一个对象的方法交给另一个对象执行，并立即执行。</p>
<h4 id="call的使用规则"><a href="#call的使用规则" class="headerlink" title="call的使用规则"></a>call的使用规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>
<ul>
<li>thisArg: <code>function</code>运行时所使用的<code>this</code>值，如果未传入，或者传入<code>undifined</code>或<code>null</code>，则指向全局对象<code>window</code>。(在严格模式下，则为<code>undifined</code>)</li>
<li>arg1, arg2 ···: 参数列表。每个参数会映射到相应位置的<code>function</code>参数上。如果将所有参数作为数组传入，它们会作为一个整体映射到<code>function</code>的第一个参数，之后的参数都为空。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">func.call(<span class="built_in">this</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);<span class="comment">//接收到的参数是&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br><span class="line">func.call(<span class="built_in">this</span>, [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]);<span class="comment">//接收到的参数是[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],undefined,undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subObj = <span class="keyword">new</span> SubType(<span class="string">&#x27;袁斌&#x27;</span>);</span><br><span class="line"></span><br><span class="line">subObj.sayName();<span class="comment">//袁斌</span></span><br></pre></td></tr></table></figure>
<p>不传入第一个参数时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;袁斌&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName.call();<span class="comment">//袁斌</span></span><br></pre></td></tr></table></figure>
<h4 id="call的模拟实现"><a href="#call的模拟实现" class="headerlink" title="call的模拟实现"></a>call的模拟实现</h4><p>根据之前对<code>call()</code>的描述，可以把其功能拆分成如下一个步骤：</p>
<ol>
<li><p>将函数设置为传入对象的属性(如果为<code>null</code>或<code>undefined</code>，则设置为<code>window</code>)</p>
</li>
<li><p>接受传入的参数，执行该函数</p>
</li>
<li><p>删除该函数</p>
</li>
</ol>
<p>根据此思路，实现<code>call()</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//判断传入对象是否为空</span></span><br><span class="line">    context = context || <span class="built_in">window</span>;</span><br><span class="line">    <span class="comment">//将函数设置为传入对象的属性</span></span><br><span class="line">    context.fn = <span class="built_in">this</span>;</span><br><span class="line">	<span class="comment">//传入参数,执行函数</span></span><br><span class="line">    <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> result = context.fn(...args);</span><br><span class="line">	<span class="comment">//删除该函数</span></span><br><span class="line">    <span class="keyword">delete</span> context.fn();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply</code>功能与<code>call</code>相同，它们的不同点在于对参数的处理。</p>
<h4 id="apply使用规则"><a href="#apply使用规则" class="headerlink" title="apply使用规则"></a>apply使用规则</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>
<p>第二个参数必须是数座或者类数组，它会被转化成一个类数组映射到function对应的参数。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>.apply(<span class="built_in">this</span>, [a, b, c]);<span class="comment">//接受到的参数为a, b, c</span></span><br></pre></td></tr></table></figure>
<h4 id="apply的模拟实现"><a href="#apply的模拟实现" class="headerlink" title="apply的模拟实现"></a>apply的模拟实现</h4><p>与<code>call</code>的差异只有参数处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.meApply(context)&#123;</span><br><span class="line">	<span class="comment">//判断传入对象是否为空</span></span><br><span class="line">	context = context || windows;</span><br><span class="line">	<span class="comment">//将函数设置为传入对象的属性</span></span><br><span class="line">	context.fn = <span class="built_in">this</span>;</span><br><span class="line">	<span class="comment">//传入参数，执行函数</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> result = context.fn(...args);</span><br><span class="line">    <span class="comment">//删除函数</span></span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind()</code>创建一个新的函数，当<code>bind()</code>被调用时，这个函数的<code>this</code>指向<code>bind()</code>的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
<h4 id="bind使用规则"><a href="#bind使用规则" class="headerlink" title="bind使用规则"></a>bind使用规则</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>
<p><code>call</code>和<code>apply</code>改变函数<code>this</code>指向的同时，会立即调用这个函数。而<code>bind</code>仅仅返回一个新函数，在这之后调用它，才会执行。</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print.bind(a);<span class="comment">//仅返回函数，不输出任何值</span></span><br><span class="line">print.bind(a)();<span class="comment">//输出1</span></span><br></pre></td></tr></table></figure>
<p>因为<code>bind</code>返回的函数暂不执行，因此不光可以在定义它时传入参数，执行时也可以传入参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = print.bind(a, <span class="string">&#x27;袁斌&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fn(<span class="number">21</span>);<span class="comment">//1 袁斌 21</span></span><br></pre></td></tr></table></figure>
<p>同时，<code>bind</code>返回的函数也可以作为构造函数，将其作为构造函数调用时，传入的<code>this</code>会被忽略，而传入参数作为构造函数的参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a =&#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Fn = print.bind(a, <span class="string">&#x27;袁斌&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">new</span> Fn(<span class="number">21</span>);<span class="comment">//undefined 袁斌 21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn.num);<span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<h4 id="bind模拟实现"><a href="#bind模拟实现" class="headerlink" title="bind模拟实现"></a>bind模拟实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnBind</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> bindArgs = [...arguments];</span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> fn ? <span class="built_in">this</span> : context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">    fnBind.prototype = <span class="keyword">new</span> fn();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fnBind;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <url>/2021/03/11/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>pc网页三栏式布局</p>
<a id="more"></a>

<h3 id="布局特点"><a href="#布局特点" class="headerlink" title="布局特点"></a>布局特点</h3><ul>
<li>三栏布局，中间一栏最先渲染和加载</li>
<li>两侧内容固定，中间内容随宽度自适应</li>
</ul>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ul>
<li>使用float布局</li>
<li>两侧使用<code>margin</code>负值，以便和中间内容重叠</li>
<li>防止中间内容被两侧覆盖，圣杯布局用<code>padding</code>，双飞翼布局用<code>margin</code></li>
</ul>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;container&quot;</span> <span class="attr">class</span> = <span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;center&quot;</span> <span class="attr">class</span> = <span class="string">&quot;column&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;left&quot;</span> <span class="attr">class</span> = <span class="string">&quot;column&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;right&quot;</span> <span class="attr">class</span> = <span class="string">&quot;column&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#header</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 根据left和right的宽度设置padding，给出显示两边内容的空间 */</span></span><br><span class="line">        <span class="selector-id">#container</span>&#123;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#center</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#left</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: yellow;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="comment">/* 通过margin-left负值使left和center横向重合 */</span></span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">            <span class="comment">/* 通过relative定位，设置right把自身向左推200px */</span></span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#right</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="comment">/* 设置margin-right负值，使自身宽度在外界看来为0，不再需要换行，自动移至center右侧 */</span></span><br><span class="line">            <span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#footer</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 通过clearfix使footer被撑到container下方 */</span></span><br><span class="line">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/2021/03/11/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/%E5%9C%A3%E6%9D%AF.png" alt="圣杯布局"></p>
<h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class="line">        this is main</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    this is left</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    this is right</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#main</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#main-wrap</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">190px</span> <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#left</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#right</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/2021/03/11/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/%E5%8F%8C%E9%A3%9E%E7%BF%BC.png" alt="双飞翼布局"></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法总结</title>
    <url>/2021/01/29/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>​        </p>
<p>​        借用WIki的简介：Markdown 是一种轻量级标记语言。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。</p>
<a id="more"></a>

<img src="/2021/01/29/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/markdown常用语法思维导图.png" width="80%">



<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p><strong>markdown标题可以用# + 文本的格式表示，#越多，标题级别越低。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></blockquote>
<p><strong>同时由于markdown支持html语法，所以也可以用h标签来写标题</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;二级标题&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;h5&gt;五级标题&lt;/h5&gt;</span><br></pre></td></tr></table></figure>
<p>效果</p>
<blockquote>
<h2>我是二级标题</h2>

<h5>我是五级标题</h5>
</blockquote>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><strong>markdown本身的语法只支持粗，斜字体</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line"></span><br><span class="line">_斜体_</span><br><span class="line"></span><br><span class="line">**粗体**</span><br><span class="line"></span><br><span class="line">__粗体__</span><br><span class="line"></span><br><span class="line">***粗斜体***</span><br><span class="line"></span><br><span class="line">___粗斜体___</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p><em>斜体</em></p>
<p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><strong>粗体</strong></p>
<p><strong><em>粗斜体</em></strong></p>
<p><strong><em>粗斜体</em></strong></p>
</blockquote>
<p><strong>同样的，由于支持html语法，我们也可以通过内嵌html来实现修改字体，字号，颜色</strong></p>
<ul>
<li>字体的设置使用<code>face</code>。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;font face=&quot;微软雅黑&quot; &gt;微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;华文彩云&quot; &gt;华文彩云&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>字号的设置使用<code>size</code>，字号数值可设为1~7，浏览器默认为3。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;font size=2 &gt;2号字&lt;/font&gt;</span><br><span class="line">&lt;font size=5 &gt;5号字&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>字体颜色的设置使用<code>color</code></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;font color=#FF000 &gt;红色&lt;/font&gt;</span><br><span class="line">&lt;font color=rgb(136,136,136) &gt;绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=blue &gt;蓝色&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<p>效果</p>
<blockquote>
<p><font face="微软雅黑">微软雅黑</font><br><font face="华文彩云">华文彩云</font></p>
<p><font size="2">2号字</font><br><font size="5">5号字</font></p>
<p><font color="#FF000">红色</font><br><font color="rgb(136,136,136)">绿色</font><br><font color="blue">蓝色</font></p>
</blockquote>
<h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>可以用***或者—来生成分隔线</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<hr>
<h4 id="特殊标识"><a href="#特殊标识" class="headerlink" title="特殊标识"></a>特殊标识</h4><ul>
<li>下划线</li>
</ul>
<p><code>&lt;u&gt;下划线&lt;/u&gt;</code></p>
<p>效果：</p>
<blockquote>
<p><u>下划线</u></p>
</blockquote>
<ul>
<li>删除线</li>
</ul>
<p><code>~~删除线~~</code></p>
<p>效果：</p>
<blockquote>
<p><del>删除线</del></p>
</blockquote>
<ul>
<li>脚注</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">我是一句话[^我是一个脚注]</span><br><span class="line"></span><br><span class="line">[^我是一个脚注]: 我是脚注的内容（放在文末）</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p> 我是一句话<a href="%E6%88%91%E6%98%AF%E8%84%9A%E6%B3%A8%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%88%E6%94%BE%E5%9C%A8%E6%96%87%E6%9C%AB%EF%BC%89">^我是一个脚注</a></p>
</blockquote>
<h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>如果要显示字符本来的内容，需在前面加上反斜杠进行转义</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure>
<p>效果</p>
<blockquote>
<p><strong>文本加粗</strong> </p>
<p>** 正常显示星号 **</p>
</blockquote>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul>
<li>无序列表</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">* 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">+ 无序列表</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
</blockquote>
<ul>
<li>有序列表</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. 第一列</span><br><span class="line">2. 第二列</span><br><span class="line">3. 第三列</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<ol>
<li>第一列</li>
<li>第二列</li>
<li>第三列</li>
</ol>
</blockquote>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>注意使用—来划分表头和内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|---|---|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line">|内容|内容|内容|</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
<tr>
<td>内容</td>
<td>内容</td>
<td>内容</td>
</tr>
</tbody></table>
</blockquote>
<h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>使用 &gt; 来来创建区块，也可以在区块中再次使用 &gt; 实现区块嵌套</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;第一层</span><br><span class="line">&gt;&gt;第二层</span><br><span class="line">&gt;&gt;&gt;第三层</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul>
<li>指定语言的代码区块</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">​```c</span><br><span class="line">int i = 1;</span><br><span class="line">print(i);</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">​```javascript</span><br><span class="line">let i = 1;</span><br><span class="line">console.log(i);</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>
<p>效果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">print(i);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>
<ul>
<li>不指定语言的代码片段</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">`console.log(1)`是一个代码片段</span><br></pre></td></tr></table></figure>
<p>效果:</p>
<blockquote>
<p> <code>console.log(1)</code>是一个代码片段</p>
</blockquote>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul>
<li>链接使用方法如下</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是一个链接[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>这是一个链接<a href="http://baidu.com/">百度</a></p>
</blockquote>
<ul>
<li>也可以直接使用链接地址</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;http://baidu.com&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p><a href="http://baidu.com/">http://baidu.com</a></p>
</blockquote>
<ul>
<li>还可以通过变量来设置一个链接，变量赋值在文档末尾进行</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这个链接用1来做变量[百度][1]</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>这个链接用1来做变量<a href="http://baidu.com/">百度</a></p>
</blockquote>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>Markdown 图片语法格式如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![一只猫](markdown常用语法总结/cat.jpg)</span><br><span class="line"></span><br><span class="line">![一只猫](markdown常用语法总结/cat.jpg &quot;猫&quot;)</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p><img src="/2021/01/29/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/cat.jpg" alt="一只猫"></p>
</blockquote>
<blockquote>
<p><img src="/2021/01/29/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/cat.jpg" alt="一只猫" title="猫"></p>
</blockquote>
<ul>
<li>Markdown 还没有办法指定图片的高度与宽度，但是可以使用 <img> 标签来达到目的。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;img src = &quot;cat.jpg&quot;, width = 10%&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<img src="/2021/01/29/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/cat.jpg" width="10%">
</blockquote>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除了这些，还可以用markdown实现流程图，甘特图的绘制，以及利用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式的方式在编辑器插入数学公式。但是鉴于根本用不到，故不再赘述。</p>
<h4 id="补充-不定期更新"><a href="#补充-不定期更新" class="headerlink" title="补充(不定期更新)"></a>补充(不定期更新)</h4><ol>
<li><p>今天发现markdown无法通过<code>tab</code>或空格实现完美的首行缩进，故采用在首行输入两个<code>&amp;emsp;</code>来实现完美的中文缩进两格：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;我的名字叫吉良吉影，33岁。住在杜王町东北部的别墅区一带，未婚。我在龟友连锁店服务。每天都要加班到晚上8点才能回家。我不抽烟，酒仅止于浅尝。晚上11点睡，每天要睡足8个小时。睡前，我一定喝一杯温牛奶，然后做20分钟的放松操，上了床，马上熟睡。一觉到天亮，决不把疲劳和压力，留到第二天。医生都说我很正常</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>&emsp;&emsp;我的名字叫吉良吉影，33岁。住在杜王町东北部的别墅区一带，未婚。我在龟友连锁店服务。每天都要加班到晚上8点才能回家。我不抽烟，酒仅止于浅尝。晚上11点睡，每天要睡足8个小时。睡前，我一定喝一杯温牛奶，然后做20分钟的放松操，上了床，马上熟睡。一觉到天亮，决不把疲劳和压力，留到第二天。医生都说我很正常</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2021/04/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>简单归纳一下排序算法(施工中)</p>
<a id="more"></a>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>依次比较相邻元素，把较大的放到右边。以此类推执行n - 1次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">const</span> temp = nums[j + <span class="number">1</span>];</span><br><span class="line">                nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">                nums[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>找到数组最小的值，把它放在第一位，再找到第二小的值放到第二位···</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> indexMin = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[indexMin])&#123;</span><br><span class="line">                indexMin = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(indexMin !== i)&#123;</span><br><span class="line">            <span class="keyword">const</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[indexMin];</span><br><span class="line">            nums[indexMin] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>从第二个数往前比，如果比它大就往后排，以此类推进行到最后一个数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">const</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[j  - <span class="number">1</span>];</span><br><span class="line">                nums[j - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>先分：把数组分成两半，再递归地对把子数字分成两半，直到分成一个个单独的数。<br>再合：把两个数合并成一个有序数组，再把有序数组进行合并，直到全部子数组合并成为一个完整的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(nums.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> left = nums.slice(<span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">const</span> right = nums.slice(mid, nums.length);</span><br><span class="line">    <span class="keyword">const</span> orderLeft = sortArray(left);</span><br><span class="line">    <span class="keyword">const</span> orderRight = sortArray(right);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">while</span>(orderLeft.length || orderRight.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(orderLeft.length &amp;&amp; orderRight.length)&#123;</span><br><span class="line">            res.push(orderLeft[<span class="number">0</span>] &lt; orderRight[<span class="number">0</span>] ? orderLeft.shift() : orderRight.shift());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(orderLeft.length)&#123;</span><br><span class="line">            res.push(orderLeft.shift());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(orderRight.shift())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>分区：选定一个数作为基准，把比它小的放它左边，大的放右边。<br>递归：递归地对基准前后的子数组进行分区。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">const</span> left = [], right = [];</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * nums.length);</span><br><span class="line">    <span class="keyword">const</span> mid = nums.splice(index, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; mid)&#123;</span><br><span class="line">            left.push(nums[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right.push(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [...sortArray(left), mid, ...sortArray(right)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树的常见算法</title>
    <url>/2021/03/19/%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>持续更新</p>
<a id="more"></a>

<h4 id="树的深度优先遍历"><a href="#树的深度优先遍历" class="headerlink" title="树的深度优先遍历"></a>树的深度优先遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(root.val);</span><br><span class="line">    root.children.forEach(dfs);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="树的广度优先遍历"><a href="#树的广度优先遍历" class="headerlink" title="树的广度优先遍历"></a>树的广度优先遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfs</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> q = [];</span><br><span class="line">    q.push(root)</span><br><span class="line">    <span class="keyword">while</span>(q.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = q.shift();</span><br><span class="line">        <span class="built_in">console</span>.log(n.val);</span><br><span class="line">        n.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            q.push(child);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的先序遍历"><a href="#二叉树的先序遍历" class="headerlink" title="二叉树的先序遍历"></a>二叉树的先序遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> presorder = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        presorder(root.left, res);</span><br><span class="line">        presorder(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">    presorder(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [], stack = [root];</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = stack.pop();</span><br><span class="line">        res.push(n.val);</span><br><span class="line">        <span class="keyword">if</span>(n.right) stack.push(n.right);</span><br><span class="line">        <span class="keyword">if</span>(n.left) stack.push(n.left);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> inorder = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">///非递归</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [], stack = [];</span><br><span class="line">    <span class="keyword">let</span> p = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p || stack.length)&#123;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> n = stack.pop();</span><br><span class="line">        res.push(n.val);</span><br><span class="line">        p = n.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> postorder = <span class="function"><span class="params">root</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">        postorder(root.left);</span><br><span class="line">        postorder(root.right);</span><br><span class="line">        res.push(root.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    postorder(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [], stack = [root];</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = stack.pop();</span><br><span class="line">        res.push(n.val);</span><br><span class="line">        <span class="keyword">if</span>(n.left) stack.push(n.left);</span><br><span class="line">        <span class="keyword">if</span>(n.right) stack.push(n.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">n, depth</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(!n.left &amp;&amp; !n.right)&#123;</span><br><span class="line">            res = <span class="built_in">Math</span>.max(res, depth);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(n.left, depth + <span class="number">1</span>);</span><br><span class="line">        dfs(n.right, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用队列储存每一层节点</span></span><br><span class="line">    <span class="keyword">const</span> q = [[root, <span class="number">1</span>]];</span><br><span class="line">    <span class="comment">//广度优先遍历</span></span><br><span class="line">    <span class="keyword">while</span>(q.length)&#123;</span><br><span class="line">        <span class="keyword">const</span> [n, depth] = q.shift();</span><br><span class="line">        <span class="keyword">if</span>(n.left == <span class="literal">null</span> &amp;&amp; n.right == <span class="literal">null</span>) <span class="keyword">return</span> depth;</span><br><span class="line">        <span class="keyword">if</span>(n.left) q.push([n.left, depth + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(n.right) q.push([n.right, depth + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">const</span> q = [root]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> len = q.length;</span><br><span class="line">        res.push([]);</span><br><span class="line">        <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">            <span class="keyword">const</span> n = q.shift();</span><br><span class="line">            res[res.length - <span class="number">1</span>].push(n.val);</span><br><span class="line">            <span class="keyword">if</span>(n.left) q.push(n.left);</span><br><span class="line">            <span class="keyword">if</span>(n.right) q.push(n.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树路径总和"><a href="#二叉树路径总和" class="headerlink" title="二叉树路径总和"></a>二叉树路径总和</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">n, sum</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum === targetSum &amp;&amp; !n.left &amp;&amp; !n.right)&#123;</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n.left) dfs(n.left, n.left.val + sum);</span><br><span class="line">        <span class="keyword">if</span>(n.right) dfs(n.right, n.right.val + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root, root.val);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>行内元素、块级元素</title>
    <url>/2021/03/07/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>简单总结行内元素、块级元素、行内块元素的异同</p>
<a id="more"></a>

<p><strong>块级元素</strong>：</p>
<ul>
<li>独占一行</li>
<li>设置width和height有效。（默认width是父元素的100%，height取决于内容的height）</li>
<li>设置margin，上下左右有效</li>
<li>设置padding，上下左右有效</li>
</ul>
<blockquote>
<p>常见块级元素：<code>div</code>、<code>h1~6</code>、<code>p</code>、<code>ul</code></p>
</blockquote>
<p><strong>行内元素</strong>：</p>
<ul>
<li>不会独占一行</li>
<li>设置width和height无效。（默认width取决于内容的width，默认height取决于内容的height）</li>
<li>设置margin，左右有效，上下无效</li>
<li>设置padding，上下左右都有效，但不建议设置上下，易导致对上下元素的覆盖。</li>
</ul>
<blockquote>
<p>常见行内元素：<code>a</code> 、<code>span</code>、 <code>em</code>、 <code>i</code>、 <code>b</code>、 <code>strong</code></p>
</blockquote>
<p><strong>行内块元素</strong></p>
<ul>
<li>不会独占一行</li>
<li>设置width和height有效</li>
<li>设置margin，上下左右有效</li>
<li>设置padding，上下左右有效</li>
</ul>
<hr>
<p><strong>使用display属性可以将三者互相转换</strong>：</p>
<ul>
<li><code>display: inline</code>转换为行内元素</li>
<li><code>display: block</code>转换为块级元素</li>
<li><code>display: inline-block</code>转换为行内块级元素</li>
<li><code>display: none</code>元素不显示</li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>重排和重绘</title>
    <url>/2021/03/19/%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/</url>
    <content><![CDATA[<p>施工中—</p>
<a id="more"></a>]]></content>
      <tags>
        <tag>前端性能</tag>
      </tags>
  </entry>
</search>
